plugins {
    id "groovy"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline" version "4.3.0"

    id "org.grails.grails-plugin"
    id "application"
    id "eclipse"
    id "org.grails.grails-gsp"
}

group = "dialog"
version="0.1"
repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

configurations {
    all {
    }
    moduleimplementation {
        extendsFrom implementation
    }

}

dependencies {
    compileOnly("org.grails:grails-core")
    compileOnly("org.grails:grails-logging")
    compileOnly("org.grails:grails-plugin-databinding")
    compileOnly("org.grails:grails-plugin-i18n")
    compileOnly("org.grails:grails-plugin-interceptors")
    compileOnly("org.grails:grails-plugin-rest")
    compileOnly("org.grails:grails-plugin-services")
    compileOnly("org.grails:grails-plugin-url-mappings")
    compileOnly("org.grails:grails-web-boot")
    compileOnly("org.grails.plugins:hibernate5")
    compileOnly("org.hibernate:hibernate-core:5.6.15.Final")
    compileOnly("org.springframework.boot:spring-boot-autoconfigure")
    compileOnly("org.springframework.boot:spring-boot-starter-logging")
    compileOnly("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.spockframework:spock-core")
    testImplementation("io.micronaut:micronaut-http-client")

    implementation  "commons-io:commons-io:2.15.1"
    implementation "org.apache.commons:commons-lang3:3.14.0"
}

application {
    mainClass.set("dialog.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

assets {
    packagePlugin = true
    minifyJs = true
    minifyCss = true
    excludes = ["ext/**","*-local/**"]
    includes = ["ext/**/*.jpg","ext/**/*.jpeg","ext/**/*.png","ext/**/*.ttf","ext/**/*.svg","ext/**/*.woff","ext/**/*.eot","ext/**/*.svg","ext/ckeditor/**/*.*"]

}
bootJar.enabled = false

tasks.jar {
    archiveFileName.set("dialog.jar")
    doLast {
        
    }
}

task copyToLib(type: Copy) {
    into "${buildDir}/output/libs"
    from configurations.all
}


war.enabled=false

task copyModuleProvidedDeps(type: Copy) {
    group = "Build"
    description = "Copy the dependencies that are provided by the module for Alice in the build/libs folder of the project folder. Including all the dependencies of the selected module provided dependencies."
    timeout = Duration.ofMinutes(10)
    def dirName ="${projectDir}/build/libs"
    from configurations.moduleimplementation
    into "${dirName}"
}

tasks.register('modulejar')  {
   dependsOn tasks.jar
   dependsOn copyModuleProvidedDeps
}


